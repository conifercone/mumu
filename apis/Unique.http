### 雪花算法获取唯一性主键
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/pk/snowflake
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 获取简单验证码
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/captcha/simple?ttl=400&length=4
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 校验简单验证码正确性
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
POST {{unique-service-url}}/captcha/simple/verify
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

{
  "id": 107739086848,
  "source": "YZTG"
}

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 获取可用时区列表
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/time/timezone/available
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 获取当前服务器时间
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/time/serverTime?zoneId=UTC
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 生成二维码（返回Base64格式的图片数据链接）
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/qrCode/dataUrl?content=测试
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 生成条形码（返回Base64格式的图片数据链接）
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/barCode/dataUrl?content=test&width=500&
    footContent=4564871632455648978946516464498498794964
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 获取所有城市详细信息（包含省（州）、市信息）
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getCountryStateCity
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 获取所有城市详细信息（不包含省（州）、市信息）
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getCountries
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 根据国家ID获取省或州信息
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getStatesByCountryId/45
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 根据省或州ID获取城市
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getCitiesByStateId/2252
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 根据省或州ID获取省或州
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getStateById/2252
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 根据省或州ID获取省或州(包含下级城市)
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getStateCitiesById/2252
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### 根据城市id获取城市指令
< {%
  import {generateHeaders} from "./utils"

  const headers = generateHeaders(request.environment.get("unique-service-url"))
  request.variables.set("signature", headers.signature)
  request.variables.set("timestamp", headers.timestamp)
  request.variables.set("requestId", headers.requestId)
%}
GET {{unique-service-url}}/country/getCityById/19286
Content-Type: application/json
X-Request-ID: {{requestId}}
X-Signature: {{signature}}
X-Timestamp: {{timestamp}}
Connection: keep-alive
Accept: */*

> {%
  client.test("Request executed successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}
