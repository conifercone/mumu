#!/bin/sh

# 获取所有被暂存的文件
changed_files=$(git diff --cached --name-only)

# 过滤出 Java、Properties 和 XML 文件
java_files=$(echo "$changed_files" | grep '\.java$')
kotlin_files=$(echo "$changed_files" | grep '\.kt$')
properties_files=$(echo "$changed_files" | grep '\.properties$')
xml_files=$(echo "$changed_files" | grep '\.xml$')

# 初始化标志
pmd_needed=0
checkstyle_needed=0
update_license_needed=0

# 检查是否有 Java 文件，设置 PMD 标志
if [ ! -z "$java_files" ]; then
    pmd_needed=1
    checkstyle_needed=1 # Java 文件也需要检查 Checkstyle
    update_license_needed=1
fi

# 检查是否有 Kotlin 文件
if [ ! -z "$kotlin_files" ]; then
    update_license_needed=1
fi

# 检查是否有 Properties 或 XML 文件，设置 Checkstyle 标志
if [ ! -z "$properties_files" ] || [ ! -z "$xml_files" ]; then
    checkstyle_needed=1
fi

# 如果没有文件需要检查，直接退出
if [ $pmd_needed -eq 0 ] && [ $checkstyle_needed -eq 0 ]  && [ $update_license_needed -eq 0 ]; then
    echo "☀️ No relevant files changed, skipping PMD and Checkstyle and Update license."
    exit 0
fi

# 输出信息
if [ $pmd_needed -eq 1 ]; then
    echo "🦉 Running PMD on changed Java files..."
    if ./gradlew clean pmdMain; then
      echo "🎉 PMD checks passed.";
    else
      echo "🌥️ PMD check failed. Please fix the issues before committing.";
      exit 1
    fi
fi

if [ $checkstyle_needed -eq 1 ]; then
    echo "🦉 Running Checkstyle on changed Java, Properties, and XML files..."
    if ./gradlew clean checkstyleMain; then
      echo "🎉 Checkstyle checks passed.";
    else
      echo "🌥️ Checkstyle check failed. Please fix the issues before committing.";
      exit 1
    fi
fi

if [ $update_license_needed -eq 1 ]; then
  echo "🦉 Running Update license on changed Java or Kotlin files..."
  # 执行update_license脚本
  ./update_license.sh
  # 暂存变更
  git add .
  echo "🎉 License updated."
fi
